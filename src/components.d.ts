/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DatePicker {
        "backgroundcolor": string;
        "component"?: string;
        "element": string;
        "width": string;
    }
    interface CookieBanner {
        "bannertext": string;
        "buttontext": string;
        "heading": string;
        "link"?: string;
        "linkguidelines"?: string;
    }
    interface EventList {
    }
    interface ExampleComponent {
        "exampleProp": string;
        "exampleToUpperCase": () => Promise<void>;
    }
    interface FaqComponent {
        "answer": string;
        "question": string;
    }
    interface FlipCard {
        "colorback"?: string;
        "colorfront"?: string;
        "date"?: string;
        "description"?: string;
        "img": string;
        "name"?: string;
        "place"?: string;
        "textback"?: string;
        "textfront"?: string;
        "turnable": boolean;
    }
    interface ImageSlider {
        "autoplay"?: string;
        "height": string;
        "sources": string;
        "time"?: string;
        "width": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyMenu {
        "href": string;
        "id": string;
        "link": string;
        "name": string;
    }
    interface MySmlink {
        "icon": string;
        "link": string;
        "name": string;
    }
    interface SearchBar {
        "color": string;
        "component": string;
        "element": string;
        "google": string;
        "position": string;
        "width": string;
    }
}
declare global {
    interface HTMLDatePickerElement extends Components.DatePicker, HTMLStencilElement {
    }
    var HTMLDatePickerElement: {
        prototype: HTMLDatePickerElement;
        new (): HTMLDatePickerElement;
    }
    interface HTMLCookieBannerElement extends Components.CookieBanner, HTMLStencilElement {
    }
    var HTMLCookieBannerElement: {
        prototype: HTMLCookieBannerElement;
        new (): HTMLCookieBannerElement;
    };
    interface HTMLEventListElement extends Components.EventList, HTMLStencilElement {
    }
    var HTMLEventListElement: {
        prototype: HTMLEventListElement;
        new (): HTMLEventListElement;
    };
    interface HTMLExampleComponentElement extends Components.ExampleComponent, HTMLStencilElement {
    }
    var HTMLExampleComponentElement: {
        prototype: HTMLExampleComponentElement;
        new (): HTMLExampleComponentElement;
    };
    interface HTMLFaqComponentElement extends Components.FaqComponent, HTMLStencilElement {
    }
    var HTMLFaqComponentElement: {
        prototype: HTMLFaqComponentElement;
        new (): HTMLFaqComponentElement;
    };
    interface HTMLFlipCardElement extends Components.FlipCard, HTMLStencilElement {
    }
    var HTMLFlipCardElement: {
        prototype: HTMLFlipCardElement;
        new (): HTMLFlipCardElement;
    };
    interface HTMLImageSliderElement extends Components.ImageSlider, HTMLStencilElement {
    }
    var HTMLImageSliderElement: {
        prototype: HTMLImageSliderElement;
        new (): HTMLImageSliderElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyMenuElement extends Components.MyMenu, HTMLStencilElement {
    }
    var HTMLMyMenuElement: {
        prototype: HTMLMyMenuElement;
        new (): HTMLMyMenuElement;
    };
    interface HTMLMySmlinkElement extends Components.MySmlink, HTMLStencilElement {
    }
    var HTMLMySmlinkElement: {
        prototype: HTMLMySmlinkElement;
        new (): HTMLMySmlinkElement;
    };
    interface HTMLSearchBarElement extends Components.SearchBar, HTMLStencilElement {
    }
    var HTMLSearchBarElement: {
        prototype: HTMLSearchBarElement;
        new (): HTMLSearchBarElement;
    };
    interface HTMLElementTagNameMap {
        "date-picker": HTMLDatePickerElement;
        "cookie-banner": HTMLCookieBannerElement;
        "event-list": HTMLEventListElement;
        "example-component": HTMLExampleComponentElement;
        "faq-component": HTMLFaqComponentElement;
        "flip-card": HTMLFlipCardElement;
        "image-slider": HTMLImageSliderElement;
        "my-component": HTMLMyComponentElement;
        "my-menu": HTMLMyMenuElement;
        "my-smlink": HTMLMySmlinkElement;
        "search-bar": HTMLSearchBarElement;
    }
}
declare namespace LocalJSX {
    interface DatePicker {
        "backgroundcolor"?: string;
        "component"?: string;
        "element"?: string;
        "width"?: string;
    }
    interface CookieBanner {
        "bannertext"?: string;
        "buttontext"?: string;
        "heading"?: string;
        "link"?: string;
        "linkguidelines"?: string;
    }
    interface EventList {
    }
    interface ExampleComponent {
        "exampleProp"?: string;
        "onExampleEvent"?: (event: CustomEvent<string>) => void;
    }
    interface FaqComponent {
        "answer"?: string;
        "question"?: string;
    }
    interface FlipCard {
        "colorback"?: string;
        "colorfront"?: string;
        "date"?: string;
        "description"?: string;
        "img"?: string;
        "name"?: string;
        "place"?: string;
        "textback"?: string;
        "textfront"?: string;
        "turnable"?: boolean;
    }
    interface ImageSlider {
        "autoplay"?: string;
        "height"?: string;
        "sources"?: string;
        "time"?: string;
        "width"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyMenu {
        "href"?: string;
        "id"?: string;
        "link"?: string;
        "name"?: string;
        "onScroll"?: (event: CustomEvent<any>) => void;
    }
    interface MySmlink {
        "icon"?: string;
        "link"?: string;
        "name"?: string;
    }
    interface SearchBar {
        "color"?: string;
        "component"?: string;
        "element"?: string;
        "google"?: string;
        "onSearchCleared"?: (event: CustomEvent<string>) => void;
        "position"?: string;
        "width"?: string;
    }
    interface IntrinsicElements {
        "date-picker": DatePicker;
        "cookie-banner": CookieBanner;
        "event-list": EventList;
        "example-component": ExampleComponent;
        "faq-component": FaqComponent;
        "flip-card": FlipCard;
        "image-slider": ImageSlider;
        "my-component": MyComponent;
        "my-menu": MyMenu;
        "my-smlink": MySmlink;
        "search-bar": SearchBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "date-picker": LocalJSX.DatePicker & JSXBase.HTMLAttributes<HTMLDatePickerElement>;
            "cookie-banner": LocalJSX.CookieBanner & JSXBase.HTMLAttributes<HTMLCookieBannerElement>;
            "event-list": LocalJSX.EventList & JSXBase.HTMLAttributes<HTMLEventListElement>;
            "example-component": LocalJSX.ExampleComponent & JSXBase.HTMLAttributes<HTMLExampleComponentElement>;
            "faq-component": LocalJSX.FaqComponent & JSXBase.HTMLAttributes<HTMLFaqComponentElement>;
            "flip-card": LocalJSX.FlipCard & JSXBase.HTMLAttributes<HTMLFlipCardElement>;
            "image-slider": LocalJSX.ImageSlider & JSXBase.HTMLAttributes<HTMLImageSliderElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-menu": LocalJSX.MyMenu & JSXBase.HTMLAttributes<HTMLMyMenuElement>;
            "my-smlink": LocalJSX.MySmlink & JSXBase.HTMLAttributes<HTMLMySmlinkElement>;
            "search-bar": LocalJSX.SearchBar & JSXBase.HTMLAttributes<HTMLSearchBarElement>;
        }
    }
}
